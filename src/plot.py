

import numpy as np

from spn.algorithms.ASPN import AnytimeSPN

from spn.algorithms.Statistics import get_structure_stats_dict
from spn.io.Graphics import plot_spn
from spn.data.domain_stats import get_original_stats, get_max_stats

from sklearn.model_selection import KFold
import logging
import random
from sklearn.model_selection import train_test_split

logger = logging.getLogger(__name__)


import warnings
warnings.filterwarnings('ignore')



import pandas as pd
from spn.structure.Base import Context
from spn.structure.StatisticalTypes import MetaType
from spn.io.ProgressBar import printProgressBar
import matplotlib.pyplot as plt
from os import path as pth
import sys, os



datasets = ["baudio"]

path = "cross_new"

#kfolds = 3
kfold = KFold(n_splits=3, shuffle=True)

for dataset in datasets:
	
	original = get_original_stats(dataset)
	upper = get_max_stats(dataset)


	k_ll = [[-44.66817973384824, -43.755175042310746, -42.87414364517991, -42.67514213964183, -42.36874592383524, -42.15180281209105, -41.83830802162596, -41.70219098275866, -41.56866827155855, -41.42947533255409, -41.349911458902355, -41.29003423301925, -41.18847386456335, -41.107125808315196, -41.01642267840661, -41.024450691748925, -40.972589321553485, -40.99029443015017, -40.8984231193102, -40.809884960088674, -40.826688756758315, -40.70940299253669, -40.725770763972235, -40.76028320598351, -40.739459667405065, -40.73971538085969, -40.59921053408736, -40.70398616111493, -40.610659525376796, -40.677249480354, -40.615680333231424, -40.6585378399458, -40.655516269297465, -40.61260801351176, -40.608072624332756, -40.54428625369376, -40.53907200389733, -40.52464032170845, -40.516161953548306, -40.504723459118935, -40.4924566486054, -40.50607101209211, -40.4696236078656, -40.488033737473586, -40.47344464596751, -40.479131865611194, -40.431360348956545, -40.436188919282735, -40.476285111111956, -40.397245807156274, -40.44689488395955],
			[-44.550949736049915, -43.64625172213457, -42.79134721165338, -42.56384597653738, -42.272795139282316, -42.04109385327626, -41.770209372727884, -41.64186254596726, -41.5216278699322, -41.37586437904282, -41.24682557276965, -41.21438396754098, -41.15033500606036, -41.04314509382084, -40.98183719757813, -40.92832468499218, -40.880584057819924, -40.83929877792828, -40.78830747520265, -40.71752227623912, -40.72478930233974, -40.67611416247237, -40.69422738104103, -40.64012277939521, -40.64466814978645, -40.62501408182382, -40.548440536613455, -40.60349901528658, -40.50058529467807, -40.505694092824214, -40.50954796127501, -40.52325139202745, -40.543944427906595, -40.49810299615836, -40.482637629687055, -40.473878576887465, -40.43616113966166, -40.461535971922544, -40.464598512095336, -40.39876350158909, -40.4621271921817, -40.423549639870366, -40.41238706089542, -40.4049225086422, -40.380136559959645, -40.3353273486103, -40.3904847434579, -40.37654578024412, -40.37410434121296, -40.365097476349696, -40.33515787937374],
			[-44.53094097723701, -43.52532094627686, -42.67866006261431, -42.466046259456974, -42.16426344698104, -41.9618050806372, -41.68280557499061, -41.51410479831664, -41.389938426825395, -41.20979112948652, -41.191249542403405, -41.05751328402912, -41.064316423498525, -40.91733849471334, -40.86021866302897, -40.770089149455764, -40.80429709807472, -40.811886448118564, -40.7398077699513, -40.641137146799885, -40.59846311462844, -40.56115507271424, -40.514563835510074, -40.496480813803025, -40.51295358047264, -40.543149945243556, -40.4408573888242, -40.474634892040704, -40.43369998699433, -40.40723791252489, -40.40084982643347, -40.38426231045711, -40.37547973149252, -40.40294194381138, -40.385514466746606, -40.32806985171535, -40.29810837248764, -40.27793123626835, -40.31009162338202, -40.282768328892374, -40.26998930155379, -40.300268022246726, -40.29565599941576, -40.207513078768876, -40.25640519740424, -40.19603067885442, -40.23245506874106, -40.19116248074623, -40.17190222994891, -40.175105589907155, -40.183841231460036]
	]
	k_nodes = [[274, 371, 511, 644, 783, 940, 1177, 1382, 1491, 1740, 1827, 1909, 2115, 2170, 2170, 2396, 2557, 2550, 2634, 2719, 2813, 2911, 2995, 3083, 3012, 3111, 3400, 3461, 3538, 3585, 3599, 3742, 3848, 3960, 4079, 4252, 4282, 4479, 4513, 4668, 4709, 4787, 4910, 5111, 5031, 5246, 5413, 5455, 5521, 5682, 5682],
				[269, 366, 510, 643, 779, 940, 1155, 1377, 1520, 1743, 1798, 1980, 2064, 2163, 2125, 2426, 2483, 2429, 2564, 2713, 2722, 2982, 3159, 3003, 2966, 3213, 3475, 3305, 3408, 3526, 3759, 3751, 3809, 3958, 4109, 4159, 4236, 4416, 4486, 4675, 4678, 4804, 4790, 4843, 4988, 5153, 5345, 5342, 5546, 5736, 5778],
				[269, 371, 529, 634, 793, 972, 1160, 1408, 1508, 1781, 1783, 1870, 1949, 2152, 2242, 2364, 2447, 2529, 2521, 2695, 2988, 3113, 3081, 2943, 3138, 3169, 3264, 3386, 3461, 3542, 3621, 3725, 3938, 3872, 4014, 4167, 4309, 4511, 4567, 4489, 4596, 4784, 4767, 5007, 5039, 5100, 5314, 5400, 5450, 5578, 5619]

	]
	k_runtime = [[27.029816150665283, 40.423245429992676, 62.46317410469055, 82.51224732398987, 93.68428039550781, 87.98927307128906, 135.90254545211792, 226.58414363861084, 190.11823105812073, 207.01021027565002, 180.8167371749878, 325.04227471351624, 324.90332794189453, 460.8878221511841, 633.3457326889038, 582.1153960227966, 688.4509925842285, 642.4095759391785, 674.8922243118286, 851.434351682663, 833.8902869224548, 830.7964310646057, 817.2016842365265, 765.1041266918182, 846.6589138507843, 781.5817742347717, 891.0217454433441, 856.5254244804382, 831.9448807239532, 902.6219770908356, 844.0177886486053, 865.4728875160217, 832.434143781662, 886.4504816532135, 922.3477835655212, 876.1620106697083, 780.7080459594727, 928.8706121444702, 885.3338096141815, 794.8349215984344, 775.7057647705078, 872.7050263881683, 786.9329264163971, 745.2774660587311, 729.7741460800171, 890.2774059772491, 714.7015814781189, 804.896502494812, 704.8576741218567, 625.5352954864502, 668.4954817295074],
				[27.14177393913269, 44.14113473892212, 67.31746768951416, 68.2454924583435, 77.0978455543518, 158.19497203826904, 176.16064977645874, 229.64505982398987, 255.28526639938354, 241.98272800445557, 338.15111207962036, 267.04600405693054, 460.91017031669617, 314.7935600280762, 472.2270493507385, 597.1114406585693, 617.8889729976654, 595.2550778388977, 858.0899243354797, 784.7298693656921, 954.8406662940979, 783.1246061325073, 806.2783060073853, 807.8484177589417, 787.7126591205597, 831.9108748435974, 887.3975145816803, 793.6006317138672, 828.1514465808868, 846.0150327682495, 936.3481824398041, 852.723272562027, 823.615962266922, 806.0025124549866, 837.6607773303986, 751.8738081455231, 852.7660546302795, 885.4718091487885, 788.3134350776672, 828.6827392578125, 820.5000545978546, 763.2724750041962, 746.2525901794434, 694.4075365066528, 766.5734102725983, 776.2381544113159, 854.0150346755981, 711.6907346248627, 795.0546126365662, 793.6958773136139, 836.8533051013947],
				[27.805567264556885, 44.04647445678711, 70.83158588409424, 77.21115684509277, 97.40557765960693, 161.07002592086792, 149.7843210697174, 199.54505944252014, 205.24900126457214, 169.5679349899292, 235.11633253097534, 261.1801722049713, 360.2052712440491, 418.6134819984436, 541.7004818916321, 501.74122405052185, 656.4454920291901, 787.0825033187866, 787.725652217865, 905.0283241271973, 849.6727211475372, 858.2178509235382, 884.2567048072815, 826.868513584137, 766.2303855419159, 858.9235610961914, 806.1637871265411, 883.7114081382751, 871.284952878952, 841.0618462562561, 768.7256054878235, 811.2672293186188, 805.6867022514343, 816.1791150569916, 781.8271453380585, 861.3659100532532, 866.6671996116638, 897.1222467422485, 848.2660501003265, 694.7479815483093, 774.4842042922974, 826.3543648719788, 615.0683777332306, 731.4976489543915, 750.0024602413177, 793.0396199226379, 761.3847908973694, 787.3048872947693, 827.088564157486, 750.6029033660889, 759.330525636673]
				
	]
	

	
	plt.close()
	colors = ["red", "blue", "green"]

	maxlen = max([len(k_ll[i]) for i in range(len(k_ll))])
	total_ll = np.zeros(min([len(k_ll[i]) for i in range(len(k_ll))]))
	upperll = [upper["ll"]] * maxlen
	plt.plot(range(1, maxlen+1), upperll, linestyle="dashed", color ="darkred", linewidth=3, label="Upper Limit")
	originalll = [original["ll"]] * maxlen
	plt.plot(range(1, maxlen+1), originalll, linestyle="dotted", color ="purple", linewidth=3, label="LearnSPN")
	for i in range(len(k_ll)):
		plt.plot(range(1,len(k_ll[i])+1), k_ll[i], marker=f"{i+1}", color =colors[i], label=(i+1))
		total_ll += np.array(k_ll[i][:len(total_ll)])
	avg_ll = total_ll/len(k_ll)
	plt.plot(range(1,len(avg_ll)+1), avg_ll, marker="o", color ="black", linewidth=3, label="Mean")
	plt.title(f"{dataset} Log Likelihood")
	plt.legend()
	plt.xlabel("Iteration")
	plt.ylabel("Log Likelihood")
	plt.savefig(f"{path}/{dataset}/ll.png", dpi=150)
	plt.close()
	
	
	total_nodes = np.zeros(min([len(k_nodes[i]) for i in range(len(k_nodes))]))
	uppern = [upper["nodes"]] * maxlen
	plt.plot(range(1, maxlen+1), uppern, linestyle="dashed", color ="darkred", linewidth=3, label="Upper Limit")
	originaln = [original["nodes"]] * maxlen
	plt.plot(range(1, maxlen+1), originaln, linestyle="dotted", color ="purple", linewidth=3, label="LearnSPN")
	for i in range(len(k_nodes)):
		plt.plot(range(1,len(k_nodes[i])+1), k_nodes[i], marker=f"{i+1}", color =colors[i], label=(i+1))
		total_nodes += np.array(k_nodes[i][:len(total_nodes)])
	avg_nodes = total_nodes/len(k_nodes)
	plt.plot(range(1,len(avg_nodes)+1), avg_nodes, marker="o", color ="black", linewidth=3, label="Mean")
	plt.title(f"{dataset} Nodes")
	plt.legend()
	plt.xlabel("Iteration")
	plt.ylabel("# Nodes")
	plt.savefig(f"{path}/{dataset}/nodes.png", dpi=150)
	plt.close()


	total_time = np.zeros(min([len(k_runtime[i]) for i in range(len(k_runtime))]))
	uppertime = [upper["runtime"]] * maxlen
	plt.plot(range(1, maxlen+1), uppertime, linestyle="dashed", color ="darkred", linewidth=3, label="Upper Limit")
	originaltime = [original["runtime"]] * maxlen
	plt.plot(range(1, maxlen+1), originaltime, linestyle="dotted", color ="purple", linewidth=3, label="LearnSPN")
	for i in range(len(k_runtime)):
		plt.plot(range(1,len(k_runtime[i])+1), k_runtime[i], marker=f"{i+1}", color =colors[i], label=(i+1))
		total_time += np.array(k_runtime[i][:len(total_time)])
	avg_time = total_time/len(k_runtime)
	plt.plot(range(1,len(avg_time)+1), avg_time, marker="o", color ="black", linewidth=3, label="Mean")
	plt.title(f"{dataset} Run Time (in seconds)")
	plt.legend()
	plt.xlabel("Iteration")
	plt.ylabel("Run Time")
	plt.savefig(f"{path}/{dataset}/runtime.png", dpi=150)
	plt.close()
	
